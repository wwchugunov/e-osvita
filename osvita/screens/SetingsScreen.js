import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Switch, TouchableOpacity, Linking, Alert, Image, ScrollView, Modal, TouchableWithoutFeedback } from 'react-native';
import * as Notifications from 'expo-notifications';

const SetingsScreeen = ({ navigation }) => {
    const [isDarkTheme, setIsDarkTheme] = useState(false); // –°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(true);
    const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);
    const [syncFrequency, setSyncFrequency] = useState('15 —Ö–≤–∏–ª–∏–Ω');
    const [isModalVisible, setModalVisible] = useState(false); // –í–∏–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    useEffect(() => {
        const requestNotificationPermissions = async () => {
            const { status } = await Notifications.requestPermissionsAsync();
            if (status !== 'granted') {
                Alert.alert('–ü–æ–º–∏–ª–∫–∞', '–î–æ–∑–≤—ñ–ª –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ –±—É–ª–æ –Ω–∞–¥–∞–Ω–æ.');
            }
        };

        requestNotificationPermissions();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const sendTestNotification = async () => {
        await Notifications.scheduleNotificationAsync({
            content: {
                title: "–¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è üì¨",
                body: "–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å.",
            },
            trigger: null, // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        });
    };

    const handleButtonPress = (toolName) => {
        navigation.navigate(toolName);
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    const toggleTheme = () => setIsDarkTheme(previousState => !previousState);

    // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const toggleNotifications = () => {
        setIsNotificationsEnabled(previousState => !previousState);
        if (!isNotificationsEnabled) {
            sendTestNotification();
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const toggleAutoUpdate = () => {
        setIsAutoUpdateEnabled(previousState => !previousState);
        Alert.alert('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', `–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ${!isAutoUpdateEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
    };

    // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const openFrequencyModal = () => {
        setModalVisible(true);
    };

    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const selectSyncFrequency = (frequency) => {
        setSyncFrequency(frequency);
        setModalVisible(false);
        Alert.alert('–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó', `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–∂–Ω—ñ ${frequency}`);
    };

    return (
        <View style={[styles.container, { backgroundColor: isDarkTheme ? '#333' : '#fff' }]}>
            <ScrollView>
                <View style={styles.header}>
                    <TouchableOpacity onPress={() => handleButtonPress('–°abinetScreen')}>
                        <Image source={require('../imgBtn/profile_img.png')} style={styles.icon} />
                    </TouchableOpacity>
                    <Text style={styles.headerTitle}>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</Text>
                    <TouchableOpacity onPress={() => handleButtonPress('SetingsScreeen')}>
                        <Image source={require('../imgBtn/setings_png.png')} style={styles.icon} />
                    </TouchableOpacity>
                </View>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã */}
                <View style={styles.optionContainer}>
                    <Text style={[styles.optionText, { color: isDarkTheme ? 'white' : 'black' }]}>–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É</Text>
                    <Switch
                        trackColor={{ false: '#767577', true: '#81b0ff' }}
                        thumbColor={isDarkTheme ? '#f5dd4b' : '#f4f3f4'}
                        onValueChange={toggleTheme}
                        value={isDarkTheme}
                    />
                </View>

                {/* –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                <View style={styles.optionContainer}>
                    <Text style={[styles.optionText, { color: isDarkTheme ? 'white' : 'black' }]}>–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è</Text>
                    <Switch
                        trackColor={{ false: '#767577', true: '#81b0ff' }}
                        thumbColor={isNotificationsEnabled ? '#f5dd4b' : '#f4f3f4'}
                        onValueChange={toggleNotifications}
                        value={isNotificationsEnabled}
                    />
                </View>

                {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */}
                <View style={styles.optionContainer}>
                    <Text style={[styles.optionText, { color: isDarkTheme ? 'white' : 'black' }]}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</Text>
                    <Switch
                        trackColor={{ false: '#767577', true: '#81b0ff' }}
                        thumbColor={isAutoUpdateEnabled ? '#f5dd4b' : '#f4f3f4'}
                        onValueChange={toggleAutoUpdate}
                        value={isAutoUpdateEnabled}
                    />
                </View>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
                <View style={styles.optionContainer}>
                    <Text style={[styles.optionText, { color: isDarkTheme ? 'white' : 'black' }]}>–ß–∞—Å—Ç–æ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</Text>
                    <TouchableOpacity onPress={openFrequencyModal}>
                        <Text style={styles.syncOptionText}>{syncFrequency}</Text>
                    </TouchableOpacity>
                </View>

                {/* –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */}
                <View style={styles.optionContainer}>
                    <Text style={[styles.optionText, { color: isDarkTheme ? 'white' : 'black' }]}>–í–µ—Ä—Å—ñ—è –¥–æ–¥–∞—Ç–∫–∞</Text>
                    <Text style={[styles.versionText, { color: isDarkTheme ? 'gray' : 'black' }]}>1.0.0</Text>
                </View>

                {/* –ö–Ω–æ–ø–∫–∞ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" */}
                <TouchableOpacity
                    style={styles.feedbackButton}
                    onPress={() => Linking.openURL('mailto:support@example.com')}
                >
                    <Text style={styles.feedbackText}>–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫</Text>
                </TouchableOpacity>

                {/* –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ */}
                <TouchableOpacity onPress={() => Linking.openURL('https://example.com/privacy')}>
                    <Text style={[styles.privacyText, { color: isDarkTheme ? '#1e90ff' : '#1e90ff' }]}>
                        –ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
                    </Text>
                </TouchableOpacity>
            </ScrollView>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã */}
            <Modal visible={isModalVisible} transparent={true} animationType="fade">
                <TouchableWithoutFeedback onPress={() => setModalVisible(false)}>
                    <View style={styles.modalOverlay} />
                </TouchableWithoutFeedback>
                <View style={styles.centeredView}>
                    <View style={styles.modalContent}>
                        <Text style={styles.modalTitle}>–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</Text>
                        <TouchableOpacity onPress={() => selectSyncFrequency('5 —Ö–≤–∏–ª–∏–Ω')}>
                            <Text style={styles.modalOption}>5 —Ö–≤–∏–ª–∏–Ω</Text>
                        </TouchableOpacity>
                        <TouchableOpacity onPress={() => selectSyncFrequency('15 —Ö–≤–∏–ª–∏–Ω')}>
                            <Text style={styles.modalOption}>15 —Ö–≤–∏–ª–∏–Ω</Text>
                        </TouchableOpacity>
                        <TouchableOpacity onPress={() => selectSyncFrequency('30 —Ö–≤–∏–ª–∏–Ω')}>
                            <Text style={styles.modalOption}>30 —Ö–≤–∏–ª–∏–Ω</Text>
                        </TouchableOpacity>
                    </View>
                </View>
            </Modal>


            {/* –§—É—Ç–µ—Ä */}
            <View style={styles.footer}>
                <Text style={[styles.footer, { color: isDarkTheme ? '#fff' : '#324F69' }]}>¬© 2024 –ï-–û–Ü–°–í–Ü–¢–ê</Text>
            </View>
        </View>
    );
};

// –°—Ç–∏–ª–∏
const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 10,
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 15,
        marginBottom: 20,
        marginTop: 35,
        backgroundColor: '#B2C1C8',
        borderRadius: 10
    },
    headerTitle: {
        fontSize: 20,
        color: '#fff',
        fontWeight: 'bold',
    },
    icon: {
        width: 30,
        height: 30,
        marginHorizontal: 10,
    },
    optionContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 20,
    },
    optionText: {
        fontSize: 18,
    },
    versionText: {
        fontSize: 16,
    },
    syncOptionText: {
        color: '#1e90ff',
        marginTop: 10,
    },
    feedbackButton: {
        marginTop: 30,
        padding: 15,
        backgroundColor: '#324F69',
        borderRadius: 8,
        alignItems: 'center',
    },
    feedbackText: {
        fontSize: 18,
        color: 'white',
    },
    privacyText: {
        fontSize: 16,
        textAlign: 'center',
        marginTop: 20,
        marginBottom: 50,
    },
    footer: {
        // backgroundColor: '#B2C1C8',
        padding: 10,
        justifyContent: 'center',
        alignItems: 'center',
        borderRadius: 34
    },
    footerText: {
        color: 'black',
    },
    centeredView: {
        flex: 1,
        justifyContent: 'center',  // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        alignItems: 'center',  // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    },
    modalContent: {
        width: '80%',  // –®–∏—Ä–∏–Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        backgroundColor: 'white',
        borderRadius: 10,
        padding: 20,
        alignItems: 'center',  // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        elevation: 5,  // –¢–µ–Ω—å –¥–ª—è Android
    },
    modalTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        marginBottom: 15,
        textAlign: 'center',
    },
    modalOption: {
        fontSize: 18,
        paddingVertical: 10,
        textAlign: 'center',
        color: '#324F69',
    },
    modalOverlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.5)',  // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    },
});

export default SetingsScreeen;
